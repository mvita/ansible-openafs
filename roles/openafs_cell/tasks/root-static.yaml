---
- name: Create the root volumes
  command: "{{ afs_vos }} create -server {{ afs_root_server }} -partition {{ afs_root_part }} -name {{ item }} -verbose"
  register: vos_result
  until: >
    vos_result.rc == 0 or
    'already exists' in vos_result.get('stderr','')
  delay: 30
  retries: 10
  changed_when: vos_result.rc == 0
  failed_when: >
    vos_result.rc != 0 and
    'already exists' not in vos_result.get('stderr','')
  with_items:
    - root.afs
    - root.cell

- name: Mount root.cell volume
  command: "{{ afs_fs }} mkmount -dir /afs/{{ afs_cell }} -vol root.cell -cell {{ afs_cell }}"
  register: fs_result
  changed_when: fs_result.rc == 0
  failed_when: >
    fs_result.rc != 0
    and not
      ( 'File exists' in fs_result.get('stderr','')
      or 'You can not change a backup or readonly volume' in fs_result.get('stderr','') )

- name: Mount root.cell read-write volume
  command: "{{ afs_fs }} mkmount -dir /afs/.{{ afs_cell }} -vol root.cell -cell {{ afs_cell }} -rw"
  register: fs_result
  changed_when: fs_result.rc == 0
  failed_when: >
    fs_result.rc != 0
    and not
      ( 'File exists' in fs_result.get('stderr','')
      or 'You can not change a backup or readonly volume' in fs_result.get('stderr','') )

- name: Grant world readable rights to root directories
  command: "{{ afs_fs }} setacl -dir {{ item }} -acl system:anyuser read"
  register: fs_result
  failed_when: >
    fs_result.rc != 0
    and 'You can not change a backup or readonly volume' not in fs_result.get('stderr','')
  with_items:
    - "/afs/."
    - "/afs/{{ afs_cell }}/."
  # todo: detect change?
  changed_when: false

- name: Add root volume read-only sites
  command: "{{ afs_vos }} addsite -server {{ afs_root_server }} -part {{ afs_root_part }} -id {{ item }}"
  register: vos_result
  changed_when: vos_result.rc == 0
  until: >
    vos_result.rc == 0
    or 'RO already exists on partition' in vos_result.get('stderr','')
  delay: 30
  retries: 10
  failed_when: >
    vos_result.rc != 0
    and 'RO already exists on partition' not in vos_result.get('stderr','')
  with_items:
    - root.afs
    - root.cell

- name: Release root volumes
  command: "{{ afs_vos }} release {{ item }} -verbose"
  with_items:
    - root.afs
    - root.cell
  # todo: detect change?
  changed_when: false

- name: Flush the volume cache on this host
  command: "{{ afs_fs }} checkvolumes"
  changed_when: false
